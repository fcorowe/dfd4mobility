[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Using Digital Footprint Data to Measure and Monitor Human Mobility",
    "section": "",
    "text": "Welcome\nThis website hosts the materials for the workshop “Using Digital Footprint Data to Measure and Monitor Human Mobility”. This training workshop was designed and is delivered by Prof. Francisco Rowe, Dr. Carmen Cabrera-Arnau, Dr. Miguel González-Leonardo, Ruth Neville and Andrea Nasuto.\nThe website is free to use and is licensed under the Attribution-NonCommercial-NoDerivatives 4.0 International. \n\n\n\n\n\n\nContact\n\nProf. Francisco Rowe, Professor in Population Data Science\nf.rowe-gonzalez [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, UK\n\n\nDr Carmen Cabrera-Arnau, Lecturer in Geographic Data Science\nc.cabrera-arnau [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, UK\n\n\nDr Miguel Gonzalez-Leonardo, Assistant Professor\nmiguel.gonzalez [at] colmex.mx\nCenter for Demographic, Urban and Environmental Studies, El Colegio de Mexico, Mexico City, Mexico\n\n\nRuth Neville, PhD candidate\nruth.neville [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, UK\n\n\nAndrea Nasuto, PhD candidate\nandrea.nasuto [at] liverpool.ac.uk\nDepartment of Geography and Planning, University of Liverpool, Liverpool, UK"
  },
  {
    "objectID": "overview.html#description",
    "href": "overview.html#description",
    "title": "Overview",
    "section": "Description",
    "text": "Description\nThis workshop offers an introduction to the use of digital footprint data from Meta-Facebook to analyse internal population movements. We will cover how to use location data collected via digital technology to develop data products to analyse human mobility. We will also illustrate how these data can be used to create statistical indicators and geographic data visualisations to extract insightful information, monitor mobility trends and identify key areas of origin and destination. The workshop will use an applied, hands-on approach in R via computational notebooks."
  },
  {
    "objectID": "overview.html#structure",
    "href": "overview.html#structure",
    "title": "Overview",
    "section": "Structure",
    "text": "Structure\n\n\n\n\n\n\n\nTime\nActivity\n\n\n\n\n9.00-9.30\nRegistration and welcome coffee\n\n\n9.30-10.30\nDigital Footprint Data overview\n\n\n10.30-10.40\nComfort break\n\n\n10.40-11.40\nMeta-Facebook data introduction\n\n\n11.40-12.15\nSoftware installation and preparation for practical session\n\n\n12.15-13.15\nLunch break\n\n\n13.15-14.30\nExploring temporal patterns of human mobility\n\n\n14.30-15.00\nCoffee break\n\n\n15.00-16.30\nExploring spatial patterns of human mobility\n\n\n16.30-17.00\nQ&A"
  },
  {
    "objectID": "overview.html#before-the-workshop",
    "href": "overview.html#before-the-workshop",
    "title": "Overview",
    "section": "Before the workshop",
    "text": "Before the workshop\n\n\n\n\n\n\nImportant\n\n\n\nPlease make sure you download and install the most recent version of R, RStudio and Quarto on the computer that you will be using during the workshop, and install the indicated R packages – see detailed instructions below.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAll three software packages are open and free to use.\n\n\nR\nYou can download R here. Make sure you select the appropriate version for your Operating System: Windows, MacOS (Apple silicon M1/M2 or older intel Macs). For example, if you use a macOS laptop with an M1 processor, click on ‘Download R for macOS’ and then, click the link to download the installer file (.pkg extension for macOS) under the header ‘For Apple silicon (M1/M2) Macs’. You can then open the installer and follow the instructions that you will be prompted with. For Windows users, click on ‘install R for the first time’ and follow the prompts.\nRStudio\nYou will also need to download RStudio Desktop (or simply RStudio), which is an integrated development environment to help you write code in R more easily. To download RStudio, follow this link and scroll down to the section titled ‘All Installers and Tarballs’. Download the appropriate installer file according to your Operating System. Then, open the installer and follow the installation instructions that you will be prompted with.\nQuarto\nDownload Quarto from this website. Quarto is a publishing system that will allow you to open and work on the computational notebooks for the workshop. On ‘Step 1’ on the website, download the version of Quarto that matches your Operating System. Open the installer file, run it and follow the prompts.\nR libraries\nOnce you have installed R, you will need to install some R extensions, known as packages, that will be useful for the applications explored in this workshop. The packages you need to install are:\n\ntidyverse\nggthemes\npatchwork\nviridis\ntmap\nsf\nsp\nstringr\nRColorBrewer\n\nTo install the packages, open RStudio. On the console window (normally at the bottom left), write the following command: install.packages(“name of package”). Make sure you replace “name of package” by the actual name of the package that you want to install e.g. install.packages(“tidyverse”). Then, press enter and repeat this process until you have installed all the packages in the list.\n\n\n\n\n\n\nNote\n\n\n\nWe might ask you to install more packages on the day that this workshop is taking place."
  },
  {
    "objectID": "overview.html#during-the-workshop",
    "href": "overview.html#during-the-workshop",
    "title": "Overview",
    "section": "During the workshop",
    "text": "During the workshop\nAll the workshop material will be made available on this website which is currently under construction. Further instructions on how to download the material will be given during the workshop."
  },
  {
    "objectID": "spatial-patterns.html#aims",
    "href": "spatial-patterns.html#aims",
    "title": "Spatial patterns",
    "section": "Aims",
    "text": "Aims\nThis session aims to provide an illustration on how to (1) analyse the spatial patterns of origin-destination mobility flow data extracted from Meta-Facebook; (2) compute basic area-based indicators of human mobility; (3) handle spatial datasets in R; and, (4) create geospatial visualisations to examine and effectively communicate human mobility patterns. We start by clearing our R environment by running:\n\n#clean environment\nrm(list=ls())"
  },
  {
    "objectID": "spatial-patterns.html#dependencies",
    "href": "spatial-patterns.html#dependencies",
    "title": "Spatial patterns",
    "section": "Dependencies",
    "text": "Dependencies\nWe ensure to load the libraries below. A core area of this session is learning to work with spatial data in R. R offers an ecosystem of purposely designed packages for manipulation of spatial data and spatial analysis techniques. These ecosystem is known a r-spatial. Various packages exist in CRAN (The Comprehensive R Archive Network), including sf (Pebesma 2018, 2022a), stars (Pebesma 2022b), terra, s2 (Dunnington, Pebesma, and Rubak 2023), lwgeom (Pebesma 2023), gstat (gstatcg?; Pebesma and Graeler 2022), spdep (Bivand 2022), spatialreg (Bivand and Piras 2022), spatstat (baddeley2015spatial?; Baddeley, Turner, and Rubak 2022), tmap (tmap?; Tennekes 2022), mapview (Appelhans et al. 2022) and more. A key package is this ecosystem is sf (Pebesma and Bivand 2023). R package sf provides a table format for simple features, where feature geometries are stored in a list-column.It appears in 2016 and was developed to move spatial data analysis in R closer to standards-based approaches seen in the industry and open source projects, to build upon more modern versions of open source geospatial software stack and allow for integration of R spatial software with the tidyverse (Wickham et al. 2019), particularly ggplot2, dplyr, and tidyr.\n\n# data wrangling\nlibrary(tidyverse)\n\n# spatial data wrangling\nlibrary(sf)\n\n# data visualisation\nlibrary(viridis) \n\n# format data visualisations\nlibrary(ggthemes)\nlibrary(patchwork)\nlibrary(showtext)\nlibrary(scales)\n\n# create maps\nlibrary(leaflet)\nlibrary(tmap)\nlibrary(mapdeck)"
  },
  {
    "objectID": "spatial-patterns.html#data",
    "href": "spatial-patterns.html#data",
    "title": "Spatial patterns",
    "section": "Data",
    "text": "Data\nHere we read all the data needed for the analysis. We use two types of data: (1) human mobility derived from Meta-Facebook users; and, administrative boundary data for Chile.\n\nMeta-Facebook mobility data\nWe use origin-destination mobility flow data between Provinces in Chile. We use data for April 2020. For a detailed description of the Meta-Facebook mobility data, please see the Meta-Facebook data introduction. We start by reading the data. We filter only flows occurring within the boundaries of Chile. The dataset contains daily flow counts between provinces that occurred in April 2020 during three windows of time during the day; that is, between 12am, 8am and 4pm.\nWe have a look at the data frame. We can see that the data contains 20 columns and 29,491 origin-destination interactions capturing counts of people moving between provinces.\n\n# read\ndf20 &lt;- readRDS(\"./data/fb/movement_adm/2020_04.rds\") %&gt;% \n  dplyr::filter(country == \"CL\")\nglimpse(df20)\n\nRows: 29,491\nColumns: 20\n$ GEOMETRY                     &lt;chr&gt; \"LINESTRING (-69.96872527689874 -23.40113…\n$ date_time                    &lt;chr&gt; \"2020-04-01 00:00\", \"2020-04-01 00:00\", \"…\n$ start_polygon_id             &lt;chr&gt; \"60845\", \"60862\", \"60845\", \"60862\", \"6086…\n$ start_polygon_name           &lt;chr&gt; \"Antofagasta\", \"Cardenal Caro\", \"Antofaga…\n$ end_polygon_id               &lt;chr&gt; \"60847\", \"60890\", \"60846\", \"60863\", \"6089…\n$ end_polygon_name             &lt;chr&gt; \"Tocopilla\", \"Melipilla\", \"El Loa\", \"Colc…\n$ length_km                    &lt;dbl&gt; 139.7543134, 24.0764953, 100.3339392, 24.…\n$ tile_size                    &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n$ country                      &lt;chr&gt; \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ level                        &lt;chr&gt; \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"…\n$ n_crisis                     &lt;dbl&gt; 79, 18, 320, 71, NA, 369, NA, 20, 11, NA,…\n$ n_baseline                   &lt;dbl&gt; 59.50, 25.50, 671.00, 132.75, NA, 559.25,…\n$ n_difference                 &lt;dbl&gt; 19.50, -7.50, -351.00, -61.75, NA, -190.2…\n$ percent_change               &lt;dbl&gt; 32.231405, -28.301887, -52.232143, -46.16…\n$ is_statistically_significant &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ z_score                      &lt;dbl&gt; 2.0148470, -0.6837043, -4.0000000, -1.261…\n$ start_lat                    &lt;dbl&gt; -24.32798, -34.32667, -24.32798, -34.3266…\n$ start_lon                    &lt;dbl&gt; -69.56718, -71.78028, -69.56718, -71.7802…\n$ end_lat                      &lt;dbl&gt; -22.06894, -33.75413, -22.81611, -34.7036…\n$ end_lon                      &lt;dbl&gt; -69.60081, -71.19829, -68.20015, -71.0631…\n\n\nWe can identify the list of origin and destination provinces for which we can observe movement.\n\nunique_origins &lt;- unique(df20$start_polygon_name)\nunique_destinations &lt;- unique(df20$end_polygon_name)\n\n\n\nMeta-Facebook active users population\nWe will also use information on the number of Meta-Facebook active users population. The population Meta-Facebook active users can vary over time reflecting their varying patterns of usage and internet accessibility.\n\n# read and select observations\npop20_df &lt;- readRDS(\"./data/fb/population_adm/2020_04.rds\") %&gt;% \n  dplyr::filter(country == \"CL\")\n\n# identify polygons\nunique_areas &lt;- unique(pop20_df$polygon_name)\n\n# data overview\nglimpse(pop20_df)\n\nRows: 4,950\nColumns: 14\n$ spaco_id         &lt;dbl&gt; 60870, 60859, 60893, 60862, 60872, 60850, 60869, 6086…\n$ country          &lt;chr&gt; \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ polygon_name     &lt;chr&gt; \"Bío-Bío\", \"San Antonio\", \"Ranco\", \"Cardenal Caro\", \"…\n$ level            &lt;chr&gt; \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LE…\n$ date_time        &lt;chr&gt; \"2020-04-01 00:00\", \"2020-04-01 00:00\", \"2020-04-01 0…\n$ n_baseline       &lt;dbl&gt; 35459.9167, 25048.9167, 8326.1780, 6164.6667, 68088.1…\n$ n_crisis         &lt;dbl&gt; 34606, 18033, 7336, 4034, 60602, 6632, 11397, 11397, …\n$ density_baseline &lt;dbl&gt; 0.014799224, 0.010454185, 0.003474937, 0.002572828, 0…\n$ density_crisis   &lt;dbl&gt; 0.014445053, 0.007527239, 0.003062154, 0.001683851, 0…\n$ n_difference     &lt;dbl&gt; -853.91667, -7015.91667, -990.17805, -2130.66667, -74…\n$ percent_change   &lt;dbl&gt; -2.40805018, -28.00774454, -11.89091959, -34.55695518…\n$ clipped_z_score  &lt;dbl&gt; -0.70353211, -1.45851614, -1.20047618, -1.29612464, -…\n$ lat              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ lon              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\n\nBing tiles\nMeta-Facebook data captured during the COVID-19 outbreak were available into two formats, at the level of Bing tiles and at the level of administrative areas. While we will be using data at the provincial level, you may be interested in having a peek at the tiles. The Bing Maps Tile System was developed by Microsoft. This system defines a series of grids at different resolution levels over a rectangular projection of the world, comprising 23 different levels of detail (Schwartz et al. 2009). Each level is constructed by dividing the previous level into fourths, with the most granular level being Level 1. Meta-Facebook data are typically produced at Bing tile levels 13 through 16, where level 13 results in tiles that are about 4.9 x 4.9 km at the Equator.\n\n\n\n\n\n\nNote\n\n\n\nIn our work in the project RECAST, we use this tile system and analyse the spatial patterns of human mobility in four Latin American countries, including Argentina, Chile, Colombia and Mexico. We expect to be in a position to share our final results with you soon. If you are interested, please do get in touch. For now, we share some of our share using Meta-Facebook data: Rowe et al. (2022), and research on the same line: González-Leonardo et al. (2022), González-Leonardo, Rowe, and Fresolone-Caparrós (2022), González-Leonardo and Rowe (2022), Wang et al. (2022) and Rowe, González-Leonardo, and Champion (2023).\n\n\nWe now read the shapefile containing the Bing tiles, simplify their boundaries and confirm it is valid. We display the boundaries for Chile and selected regions in the north, central and south of the country, to provide a better understanding of their size and areas of coverage.\n\n# read bing tiles\nbing_grid &lt;- read_sf(\"./data/shp/grid/chile_grid.shp\") %&gt;% \n  st_simplify(preserveTopology =T, # simplify boundaries\n              dTolerance = 1000) %&gt;%  # 1km\n  sf::st_make_valid() # check the geometry is valid\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe created the Bing tiles. They are not available as polygons. They are only provided as rasters and not easily accessible.\n\n\n\n\nAdministrative areas\nWe now read the boundaries for Chilean provinces. Provinces are the second administrative level in the country. Provinces are amalgamations of municipalities or comunes, and groupings of provinces are known as regions. Chile is organised around 15 regions, 54 provinces and 346 municipalities - see here.\nLet’s stop here and understand the spatial data frame or sf object we are reading. We can see it has 56 features (i.e. rows) and 5 fields (columns) within a bounding box which defines the area we can visualise on a map. You can see how the map of provinces below seems off to the right. That is because the bounding box has been set to include Chilean islands off of the coast of the country on the Pacific ocean. We will work on adjusting this at a later point in this session.\nThe line CRS or Coordinate Reference Systems identifies the projection system currently attached to the data. This would be the CRS that will be used if we decided to map the data. The component is incredible important if you intend to combine information from two spatial data frames. Ensure they are on the same CRS! A good idea is to used planar projection systems. Lovelace, Nowosad, and Muenchow (2019) provide a good discussion on the various projection systems.\n\nshp_pro &lt;- read_sf(\"./data/shp/adm/province/PROVINCIAS_2020.shp\") %&gt;% \n  st_simplify(preserveTopology =T,\n              dTolerance = 1000) %&gt;%  # 1km\n  sf::st_make_valid() \nshp_pro\n\nSimple feature collection with 56 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -109.4488 ymin: -55.98085 xmax: -66.42812 ymax: -17.4984\nGeodetic CRS:  SIRGAS-Chile 2002\n# A tibble: 56 × 6\n   CUT_REG CUT_PROV REGION        PROVINCIA SUPERFICIE                  geometry\n * &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;         &lt;chr&gt;          &lt;dbl&gt;        &lt;MULTIPOLYGON [°]&gt;\n 1 08      081      Biobío        Concepci…      3469. (((-72.77092 -37.002, -7…\n 2 01      014      Tarapacá      Tamarugal     39428. (((-68.53576 -21.06468, …\n 3 04      042      Coquimbo      Choapa        10131. (((-70.55491 -31.50954, …\n 4 05      054      Valparaíso    Petorca        4589. (((-71.46609 -32.49606, …\n 5 10      101      Los Lagos     Llanquih…     14857. (((-73.06627 -41.89869, …\n 6 11      114      Aysén del Ge… General …     11758. (((-71.75146 -46.33864, …\n 7 05      057      Valparaíso    San Feli…      2636. (((-70.61116 -32.81214, …\n 8 12      121      Magallanes y… Magallan…     37193. (((-73.03711 -54.47267, …\n 9 13      136      Metropolitan… Talagante       581. (((-70.79251 -33.69482, …\n10 15      152      Arica y Pari… Parinaco…      8142. (((-68.91415 -18.89034, …\n# ℹ 46 more rows\n\n\n\n\n\n\n\nWe will also use the regional boundaries for visualisation purposes. For now, we will just read them.\n\nshp_reg &lt;- read_sf(\"./data/shp/adm/region/REGIONES_2020.shp\") %&gt;% \n  st_simplify(preserveTopology =T,\n              dTolerance = 1000) %&gt;%  # 1km\n  sf::st_make_valid()"
  },
  {
    "objectID": "spatial-patterns.html#spatial-indicators-of-human-mobility",
    "href": "spatial-patterns.html#spatial-indicators-of-human-mobility",
    "title": "Spatial patterns",
    "section": "Spatial indicators of human mobility",
    "text": "Spatial indicators of human mobility\nThis section focuses on computing various spatial indicators to analyse the patterns of human mobility.\n\nOrigin-based indicators\nWe start by computing indicators from the perspective of origin areas.\nNeed to use indices Differences across indicators Key pattern\nThis measure is in relation to a baseline - percentage change and flow\n\norigin_df &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(start_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_perchange = mean(percent_change, na.rm = T),\n    mean_diff_flow = mean(n_difference, na.rm = T),\n    sum_diff_flow = sum(n_difference, na.rm = T),\n    mean_outflow = mean(n_crisis, na.rm = T),\n    sum_outflow = sum(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\ntail(origin_df, 10)\n\n# A tibble: 10 × 6\n   start_polygon_name mean_perchange mean_diff_flow sum_diff_flow mean_outflow\n   &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;        &lt;dbl&gt;\n 1 Santiago                   -70.6         -792.      -1309523.         612. \n 2 Talagante                  -33.8         -263.       -127657.         269. \n 3 Talca                      -52.4         -150.        -70768          115. \n 4 Tamarugal                   24.0          -53.0        -7261.          90.8\n 5 Tierra del Fuego           -76.7          -19.8         -119.          12.2\n 6 Tocopilla                  147.            -4.23        -702.          38.5\n 7 Valdivia                   -75.8         -234.        -65400.          48.3\n 8 Valparaíso                 -62.3         -350.       -257762.         169. \n 9 Ñuble                      -62.5         -165.        -56482.          60.4\n10 Última Esperanza             1.77         -21.4          -21.4         10  \n# ℹ 1 more variable: sum_outflow &lt;dbl&gt;\n\n\n\n\n\n\n\n\nQuestion 1\n\n\n\nAnalyse the designation-based indicators and interpret the patterns displayed in Santiago.\n\n\n\n\nDestination-based indicators\nDestination perspective Key pattern\n\ndestination_df &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(end_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_perchange = mean(percent_change, na.rm = T),\n    mean_diff_flow = mean(n_difference, na.rm = T),\n    sum_diff_flow = sum(n_difference, na.rm = T),\n    mean_inflow = mean(n_crisis, na.rm = T),\n    sum_inflow = sum(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\ntail(destination_df, 10)\n\n# A tibble: 10 × 6\n   end_polygon_name mean_perchange mean_diff_flow sum_diff_flow mean_inflow\n   &lt;chr&gt;                     &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;       &lt;dbl&gt;\n 1 Santiago                  -72.1       -850.        -1336029.       639. \n 2 Talagante                 -30.3       -266.         -128140        273. \n 3 Talca                     -52.1       -147.          -68827.       117. \n 4 Tamarugal                  30.0        -49.4          -7360.        88.9\n 5 Tierra del Fuego          -68.3        -16             -112         13.1\n 6 Tocopilla                  63.3         -0.899         -165.        36.6\n 7 Valdivia                  -71.2       -230.          -63284.        48.2\n 8 Valparaíso                -66.2       -341.         -245913.       170. \n 9 Ñuble                     -63.1       -158.          -57870.        58.0\n10 Última Esperanza          -12.8        NaN                0        NaN  \n# ℹ 1 more variable: sum_inflow &lt;dbl&gt;\n\n\n\n\nIntraflows\nIntra-province perspective Key pattern\n\norigin_df &lt;- df20 %&gt;% \n  filter(start_polygon_name == end_polygon_name) %&gt;% \n  group_by(start_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_perchange = mean(percent_change, na.rm = T),\n    mean_diff_flow = mean(n_difference, na.rm = T),\n    sum_diff_flow = sum(n_difference, na.rm = T),\n    mean_intraflow = mean(n_crisis, na.rm = T),\n    sum_intraflow = sum(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\ntail(origin_df, 10)\n\n# A tibble: 10 × 6\n   start_polygon_name mean_perchange mean_diff_flow sum_diff_flow mean_intraflow\n   &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;\n 1 Santiago                    6.00         32253.       2902809.        585443 \n 2 Talagante                  24.0           3776.        339841.         19627.\n 3 Talca                       4.48          1479.        133093.         34622.\n 4 Tamarugal                 -15.4           -612.        -55063.          3342.\n 5 Tierra del Fuego            1.62            13.6         1228.           886.\n 6 Tocopilla                  14.5            121.         10931            976.\n 7 Valdivia                  -10.6          -2895.       -260512.         24506.\n 8 Valparaíso                 -1.27         -1295.       -116524.        101255.\n 9 Ñuble                      -0.441         -158.        -14207.         36391.\n10 Última Esperanza          -18.7           -164.        -14750.           712.\n# ℹ 1 more variable: sum_intraflow &lt;dbl&gt;\n\n\n\n\nNetflows\nInflows minus outflows - key winners and losers Difficult to identify systematic patterns - we need visualisations.\n\n# mean outflow by area\noutflows_df &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(start_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_outflow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\n# mean inflow by area\ninflows_df &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(end_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_inflow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\n# combine data frames\nnetflow_df &lt;- cbind(inflows_df, outflows_df)\n\n# mean netflow by area\nnetflow_df &lt;- netflow_df %&gt;% \n  mutate(\n    mean_netflow = mean_inflow - mean_outflow\n  ) %&gt;% \n  select(start_polygon_name, end_polygon_name, mean_inflow, mean_outflow, mean_netflow)\n\nhead(netflow_df)\n\n  start_polygon_name end_polygon_name mean_inflow mean_outflow mean_netflow\n1        Antofagasta      Antofagasta    63.27513     66.00571    -2.730582\n2             Arauco           Arauco    91.14286     93.48276    -2.339901\n3              Arica            Arica    17.44444     20.16379    -2.719349\n4              Aysen            Aysen    28.47297     27.15385     1.319127\n5            Bío-Bío          Bío-Bío    77.86880     79.00000    -1.131195\n6          Cachapoal        Cachapoal   110.54008    112.71988    -2.179800\n\n\n\nggplot(data = netflow_df) + # input the data\n  geom_density(aes(x = mean_netflow), # specify type of geom and aesthetics\n               alpha=0.5, \n               colour=\"darkblue\", \n               linewidth = 2\n               ) +\n  theme_tufte() # choose the theme"
  },
  {
    "objectID": "spatial-patterns.html#mapping",
    "href": "spatial-patterns.html#mapping",
    "title": "Spatial patterns",
    "section": "Mapping",
    "text": "Mapping\nColour palettes\n\n\n\n\n\n\nQuestion 2\n\n\n\nWhy to create geovisualisations?\n\n\nFor creating maps, cartography is important. A carefully crafted map can be an effective way of communicating complex information. Design issues include poor placement, size and readability of text and careless selection of colors. Have a look the style guide of the Journal of Maps for details.\n\n\n\n\n\n\nNote\n\n\n\nFor colour palettes, we recommend the following resources:\n\nthe R packages viridis and RColorBrewer\nthe website color brewer 2.0\na publication by Crameri, Shephard, and Heron (2020)\n\n\n\n\nHandling spatial data\n\n# set crs\ncrs_default = \"EPSG:4326\"\n\n\ndf20 &lt;- readRDS(\"./data/fb/movement_adm/2020_04.rds\") %&gt;% \n  mutate(GEOMETRY = NULL) %&gt;% \n  dplyr::filter(country == \"CL\") %&gt;% \n  st_as_sf(coords = c(\"start_lon\", \"start_lat\"), \n                                      crs = crs_default)\n\nglimpse(df20)\n\nRows: 29,491\nColumns: 18\n$ date_time                    &lt;chr&gt; \"2020-04-01 00:00\", \"2020-04-01 00:00\", \"…\n$ start_polygon_id             &lt;chr&gt; \"60845\", \"60862\", \"60845\", \"60862\", \"6086…\n$ start_polygon_name           &lt;chr&gt; \"Antofagasta\", \"Cardenal Caro\", \"Antofaga…\n$ end_polygon_id               &lt;chr&gt; \"60847\", \"60890\", \"60846\", \"60863\", \"6089…\n$ end_polygon_name             &lt;chr&gt; \"Tocopilla\", \"Melipilla\", \"El Loa\", \"Colc…\n$ length_km                    &lt;dbl&gt; 139.7543134, 24.0764953, 100.3339392, 24.…\n$ tile_size                    &lt;dbl&gt; 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1…\n$ country                      &lt;chr&gt; \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\", \"CL\",…\n$ level                        &lt;chr&gt; \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"LEVEL3\", \"…\n$ n_crisis                     &lt;dbl&gt; 79, 18, 320, 71, NA, 369, NA, 20, 11, NA,…\n$ n_baseline                   &lt;dbl&gt; 59.50, 25.50, 671.00, 132.75, NA, 559.25,…\n$ n_difference                 &lt;dbl&gt; 19.50, -7.50, -351.00, -61.75, NA, -190.2…\n$ percent_change               &lt;dbl&gt; 32.231405, -28.301887, -52.232143, -46.16…\n$ is_statistically_significant &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ z_score                      &lt;dbl&gt; 2.0148470, -0.6837043, -4.0000000, -1.261…\n$ end_lat                      &lt;dbl&gt; -22.06894, -33.75413, -22.81611, -34.7036…\n$ end_lon                      &lt;dbl&gt; -69.60081, -71.19829, -68.20015, -71.0631…\n$ geometry                     &lt;POINT [°]&gt; POINT (-69.56718 -24.32798), POINT …\n\n\n\nshp_pro &lt;- read_sf(\"./data/shp/adm/province/PROVINCIAS_2020.shp\") %&gt;% \n  st_simplify(preserveTopology =T,\n              dTolerance = 1000) %&gt;%  # 1km\n  sf::st_make_valid() %&gt;% \n  st_transform(crs_default)\n\nRecompute \n\n# mean outflow by area\noutflows_df &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(start_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_outflow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\n# mean inflow by area\ninflows_df &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(end_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_inflow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup() %&gt;% \n  st_drop_geometry()\n\n# combine data frames\nnetflow_df &lt;- cbind(outflows_df, inflows_df)\n\n# mean netflow by area\nnetflow_df &lt;- netflow_df %&gt;% \n  mutate(\n    mean_netflow = mean_inflow - mean_outflow\n  ) %&gt;% \n  dplyr::select(start_polygon_name, mean_inflow, mean_outflow, mean_netflow, geometry) %&gt;% \n  rename(\n    polygon_name = start_polygon_name\n  ) \n\nhead(netflow_df)\n\nSimple feature collection with 6 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -73.58022 ymin: -45.45868 xmax: -69.56718 ymax: -18.71308\nGeodetic CRS:  WGS 84\n  polygon_name mean_inflow mean_outflow mean_netflow\n1  Antofagasta    63.27513     66.00571    -2.730582\n2       Arauco    91.14286     93.48276    -2.339901\n3        Arica    17.44444     20.16379    -2.719349\n4        Aysen    28.47297     27.15385     1.319127\n5      Bío-Bío    77.86880     79.00000    -1.131195\n6    Cachapoal   110.54008    112.71988    -2.179800\n                     geometry\n1 POINT (-69.56718 -24.32798)\n2  POINT (-73.3454 -37.72772)\n3 POINT (-69.85541 -18.71308)\n4 POINT (-73.58022 -45.45868)\n5 POINT (-71.92786 -37.53828)\n6  POINT (-70.7088 -34.28421)\n\n\n\nggplot() + \n  geom_sf(data = shp_pro,\n          color = \"gray60\", \n          size = 0.1) +\n  geom_point(data = netflow_df,\n    aes(geometry = geometry),\n    stat = \"sf_coordinates\"\n  ) \n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n\n\n\n\n\n\nbbox_new &lt;- st_bbox(shp_pro) # current bounding box\n\nxrange &lt;- bbox_new$xmax - bbox_new$xmin # range of x values\nyrange &lt;- bbox_new$ymax - bbox_new$ymin # range of y values\n\nbbox_new[1] &lt;- bbox_new[1] + (0.6 * xrange) # xmin - left\n#bbox_new[3] &lt;- bbox_new[3] + (0.5 * xrange) # xmax - right\n#bbox_new[2] &lt;- bbox_new[2] - (0.5 * yrange) # ymin - bottom\n#bbox_new[4] &lt;- bbox_new[4] + (0.5 * yrange) # ymax - top\n\nbbox_new &lt;- bbox_new %&gt;%  # take the bounding box ...\n  st_as_sfc() # ... and make it a sf polygon\n\nggplot() + \n  geom_sf(data = shp_pro,\n          color = \"gray60\", \n          size = 0.1) +\n  geom_point(data = netflow_df,\n    aes(geometry = geometry),\n    stat = \"sf_coordinates\",\n    size = .1\n  ) +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], # min & max of x values\n           ylim = st_coordinates(bbox_new)[c(2,3),2]) + # min & max of y values\n  theme_void()\n\nWarning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not\ngive correct results for longitude/latitude data\n\n\n\n\n\n\nmob_indicators &lt;- st_join(shp_pro, netflow_df)\n\nnetflow_df$check &lt;- netflow_df$polygon_name %in% mob_indicators$polygon_name\n\nnetflow_df %&gt;% select(polygon_name, check) %&gt;% \n  filter(check == \"FALSE\")\n\nSimple feature collection with 2 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -71.75919 ymin: -53.0857 xmax: -71.70694 ymax: -33.14564\nGeodetic CRS:  WGS 84\n  polygon_name check                    geometry\n1   Magallanes FALSE  POINT (-71.70694 -53.0857)\n2   Valparaíso FALSE POINT (-71.75919 -33.14564)\n\n\n\ncoordinates &lt;- st_coordinates(netflow_df) \nnetflow_df &lt;- cbind(netflow_df, coordinates) %&gt;% \n  rename(\n    long = X, \n    lat = Y\n  )\n\nprovince_name &lt;- c(\"Valparaíso\", \"Magallanes\")\n\nfor (area in 1:2) {\n  long &lt;- netflow_df %&gt;% \n    st_drop_geometry() %&gt;% \n    dplyr::filter(polygon_name == province_name[area]) %&gt;% \n    select(long) %&gt;% \n    as.numeric()\n  \n  lat &lt;- netflow_df %&gt;% \n    st_drop_geometry() %&gt;%\n    dplyr::filter(polygon_name == province_name[area]) %&gt;% \n    select(lat) %&gt;% \n    as.numeric()\n\n  st_geometry(netflow_df[netflow_df$polygon_name == province_name[area], ]) &lt;-  st_sfc(st_point(c( long * 0.98, lat * 1 )))\n}\n\n\nmob_indicators &lt;- st_join(shp_pro, netflow_df, \n                          st_intersects)\n\nnetflow_df$check &lt;- netflow_df$polygon_name %in% mob_indicators$polygon_name\n\nnetflow_df %&gt;% select(polygon_name, check) %&gt;% \n  filter(check == \"FALSE\")\n\nSimple feature collection with 0 features and 2 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nGeodetic CRS:  WGS 84\n[1] polygon_name check        geometry    \n&lt;0 rows&gt; (or 0-length row.names)\n\n\nJoin point-in-polygons\nOverlay start points from the mobility dataset over the polygons. Extract start points from the linestring geometry and use that to create the spatial data frame for mobility.\n\n\nChoropleths\nChoropleths are thematic maps. They are easy to create but also to get wrong. We will look at a set of the principles you can follow to create effective choropleth maps. Here three more questions to consider:\n\nWhat is being plotted?\nWhat is the target audience?\nWhat degree of interactivity we want to offer?\n\nMap flows - use code from uk migration paper\n\n# set categories\nmob_indicators &lt;- mob_indicators %&gt;% \n  mutate(\n    netflow_class = mean_netflow %&gt;% cut(7, dig.lab = 3),\n    inflow_class = mean_inflow %&gt;% cut(7, dig.lab = 3),\n    outflow_class = mean_outflow %&gt;% cut(7, dig.lab = 3)\n  ) \n\n# adjust labels for netflows\nnetflow_labels &lt;- levels(mob_indicators$netflow_class)\nnetflow_labels &lt;- gsub(\"\\\\(|\\\\]\", \"\", netflow_labels)\nlevels(mob_indicators$netflow_class) &lt;- netflow_labels\n\n# adjust labels for inflows\ninflow_labels &lt;- levels(mob_indicators$inflow_class)\ninflow_labels &lt;- gsub(\"\\\\(|\\\\]\", \"\", inflow_labels)\nlevels(mob_indicators$inflow_class) &lt;- inflow_labels\n\n# adjust labels for netflows\noutflow_labels &lt;- levels(mob_indicators$outflow_class)\noutflow_labels &lt;- gsub(\"\\\\(|\\\\]\", \"\", outflow_labels)\nlevels(mob_indicators$outflow_class) &lt;- outflow_labels\n\n# change geometry\nshp_reg &lt;- shp_reg %&gt;% st_transform(crs_default)\n\n\n# map netflows\nnetflow_plot &lt;- ggplot(data = mob_indicators, aes(fill = netflow_class)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_brewer(palette = \"RdBu\", direction = -1) +\n  scale_color_manual(labels = netflow_labels) +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"(a) Netflow\",\n       fill = \"%\") +\n  theme_void() + \n  geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n# map inflows\ninflow_plot &lt;- ggplot(data = mob_indicators, aes(fill = inflow_class)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_brewer(palette = \"PuRd\", direction = 1) +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"(b) Inflow\",\n       fill = \"%\") +\n  theme_void() + \n  geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n# map outflows\noutflow_plot &lt;- ggplot(data = mob_indicators, aes(fill = outflow_class)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_brewer(palette = \"PuBu\", direction = 1) +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"(b) Outflow\",\n       fill = \"%\") +\n  theme_void() +\n    geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n# combine plots\nnetflow_plot + inflow_plot + outflow_plot\n\n\n\n\nFlow to Facebook population size\nLittle effect\n\n# compute mean population\nmean_fb_pop &lt;- pop20_df %&gt;% group_by(polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_pop = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\n# join to mobility indicators data frame\nmob_indicators &lt;- left_join(mob_indicators, mean_fb_pop, \n                        by = c(\"polygon_name\" = \"polygon_name\")) %&gt;% \n  mutate(\n    outflow_to_pop = (mean_outflow / mean_pop) # compute outflow to population\n  )\n\n# map outflow_to_pop\nggplot(data = mob_indicators, aes(fill = outflow_to_pop)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_viridis_c() +\n  theme_map() +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"Flows to population size\",\n       fill = \"Number of people per 100\") +\n  theme_void() +\n    geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .1,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2])\n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n\n\n\n\nChanges over time\n\n# read April 2022 data\ndf22 &lt;- readRDS(\"./data/fb/movement_adm/2022_04.rds\") %&gt;% \n  mutate(GEOMETRY = NULL) %&gt;% \n  dplyr::filter(country == \"CL\") %&gt;% \n  st_as_sf(coords = c(\"start_lon\", \"start_lat\"), \n                                      crs = crs_default)\n\n# mean outflow by area\noutflows_df &lt;- df22 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(start_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_outflow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\n# mean inflow by area\ninflows_df &lt;- df22 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(end_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_inflow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup() %&gt;% \n  st_drop_geometry()\n\n# combine data frames\nnetflow_df &lt;- cbind(outflows_df, inflows_df)\n\n# mean netflow by area\nnetflow_df &lt;- netflow_df %&gt;% \n  mutate(\n    mean_netflow = mean_inflow - mean_outflow\n  ) %&gt;% \n  dplyr::select(start_polygon_name, mean_inflow, mean_outflow, mean_netflow, geometry) %&gt;% \n  rename(\n    polygon_name = start_polygon_name\n  ) \n\n# extract coordinates\ncoordinates &lt;- st_coordinates(netflow_df) \n\n# add coordinates\nnetflow_df &lt;- cbind(netflow_df, coordinates) %&gt;% \n  rename(\n    long = X, \n    lat = Y\n  )\n\n# list province names\nprovince_name &lt;- c(\"Valparaíso\", \"Magallanes\")\n\n# loop to replace point geometries\nfor (area in 1:2) {\n  long &lt;- netflow_df %&gt;% \n    st_drop_geometry() %&gt;% \n    dplyr::filter(polygon_name == province_name[area]) %&gt;% \n    select(long) %&gt;% \n    as.numeric()\n  \n  lat &lt;- netflow_df %&gt;% \n    st_drop_geometry() %&gt;%\n    dplyr::filter(polygon_name == province_name[area]) %&gt;% \n    select(lat) %&gt;% \n    as.numeric()\n\n  st_geometry(netflow_df[netflow_df$polygon_name == province_name[area], ]) &lt;-  st_sfc(st_point(c( long * 0.98, lat * 1 )))\n}\n\n# combine indicators with province polygons\nmob_indicators22 &lt;- st_join(shp_pro, netflow_df, \n                          st_intersects)\n\n# add year to data frame\nmob_indicators$year &lt;- \"2020\"\nmob_indicators22$year &lt;- \"2022\"\n\n# combine data frames for 2020 and 2022\nmob_indicators &lt;- mob_indicators %&gt;% select(names(mob_indicators22)) # remove columns to make data frames compatible\nmob_indicators_20.22 &lt;- rbind(mob_indicators, mob_indicators22)\n\n\n# map netflows\nggplot(data = mob_indicators_20.22, aes(fill = mean_netflow)) +\n  geom_sf(col = \"white\", size = .1) +\n  coord_sf() +\n  scale_fill_gradient2(\n    low = muted(\"blue\"),\n    mid = \"white\",\n    high = \"red\",\n    midpoint = 0,\n    space = \"Lab\",\n    na.value = \"white\",\n    guide = \"colourbar\",\n    aesthetics = \"fill\"\n    ) +\n  theme_map() +\n  facet_grid(cols = vars(year)) +\n  theme(plot.title = element_text(size = 22, face = \"bold\"),\n        legend.position = \"none\") +\n  labs(title = \"Netflow\",\n       fill = \"Number of people\") +\n  theme_void() + \n  geom_sf(data = shp_reg,\n          col = \"grey70\", \n          size = .5,\n          fill = \"transparent\") +\n  coord_sf(xlim = st_coordinates(bbox_new)[c(1,2),1], \n           ylim = st_coordinates(bbox_new)[c(2,3),2]) \n\nCoordinate system already present. Adding new coordinate system, which will\nreplace the existing one.\n\n\n\n\n\n\n\nInteractive mapping\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mob_indicators22) + \n    tm_fill(\"mean_netflow\",\n          palette = \"RdBu\",\n          title = \"Netflows\")\n\nVariable(s) \"mean_netflow\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n# switch to other mode: \"view\"\nttm()\n\ntmap mode set to plotting\n\n\n\n\nFlow mapping\n\ndf20 &lt;- readRDS(\"./data/fb/movement_adm/2020_04.rds\") %&gt;% \n  mutate(GEOMETRY = NULL) %&gt;% \n  dplyr::filter(country == \"CL\") \n\nflow_df20 &lt;- df20 %&gt;% \n  filter(start_polygon_name != end_polygon_name) %&gt;% \n  group_by(start_polygon_name, end_polygon_name) %&gt;% \n  dplyr::summarise(\n    mean_flow = mean(n_crisis, na.rm = T)\n    ) %&gt;% \n  ungroup()\n\norigin_coordinate_df &lt;- df20 %&gt;% \n  dplyr::select( c(start_polygon_name, start_lat, start_lon)) %&gt;% \n  distinct()\n\ndestination_coordinate_df &lt;- df20 %&gt;% \n  dplyr::select( c(end_polygon_name, end_lat, end_lon)) %&gt;% \n  distinct()\n\nflow_df20 &lt;- left_join(flow_df20, origin_coordinate_df, by = c(\"start_polygon_name\" = \"start_polygon_name\"))\nflow_df20 &lt;- left_join(flow_df20, destination_coordinate_df, by = c(\"end_polygon_name\" = \"end_polygon_name\"))\n\n\ndf_santiago &lt;- flow_df20 %&gt;% dplyr::filter(start_polygon_name == \"Santiago\")\n\nhead(df_santiago)\n\n# A tibble: 6 × 7\n  start_polygon_name end_polygon_name mean_flow start_lat start_lon end_lat\n  &lt;chr&gt;              &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 Santiago           Antofagasta           33.3     -33.4     -70.5   -24.3\n2 Santiago           Arauco               NaN       -33.4     -70.5   -37.7\n3 Santiago           Arica                 17.8     -33.4     -70.5   -18.7\n4 Santiago           Bío-Bío               18.5     -33.4     -70.5   -37.5\n5 Santiago           Cachapoal            292.      -33.4     -70.5   -34.3\n6 Santiago           Cardenal Caro         13.3     -33.4     -70.5   -34.3\n# ℹ 1 more variable: end_lon &lt;dbl&gt;\n\n\n\nkey &lt;- \"pk.eyJ1IjoiZmNvcm93ZSIsImEiOiJja2Jyc2Qxd2QyNngwMndwOTVxa3B2bjBpIn0.vA3y1-WhmI_W3NxCKlILzw\" ## put your own token here\n\nflowmap &lt;- mapdeck( token = key, style = mapdeck_style(\"dark\"),\n                location = c(-3.7, 40.4), zoom = 6, pitch = 45) %&gt;%\n  add_arc(\n    data = df_santiago,\n    layer_id = \"arc_layer\",\n    origin = c(\"start_lon\", \"start_lat\"),\n    destination = c(\"end_lon\", \"end_lat\"),\n    # stroke_from = \"start_polygon_name\",\n    # stroke_to = \"end_polygon_name\",\n    # stroke_width = \"stroke\",\n    palette = \"reds\",\n    legend = list( stroke_from = F, stroke_to = F ),\n  )\n\nRegistered S3 method overwritten by 'jsonify':\n  method     from    \n  print.json jsonlite\n\n# plot the interactive map\nflowmap\n\n\n\n\n\nMapbox \n\n\n\n\n\n\n\nAppelhans, Tim, Florian Detsch, Christoph Reudenbach, and Stefan Woellauer. 2022. Mapview: Interactive Viewing of Spatial Data in r. https://github.com/r-spatial/mapview.\n\n\nBaddeley, Adrian, Rolf Turner, and Ege Rubak. 2022. Spatstat: Spatial Point Pattern Analysis, Model-Fitting, Simulation, Tests. http://spatstat.org/.\n\n\nBivand, Roger. 2022. Spdep: Spatial Dependence: Weighting Schemes, Statistics.\n\n\nBivand, Roger, and Gianfranco Piras. 2022. Spatialreg: Spatial Regression Analysis. https://CRAN.R-project.org/package=spatialreg.\n\n\nCrameri, Fabio, Grace E. Shephard, and Philip J. Heron. 2020. “The Misuse of Colour in Science Communication.” Nature Communications 11 (1). https://doi.org/10.1038/s41467-020-19160-7.\n\n\nDunnington, Dewey, Edzer Pebesma, and Ege Rubak. 2023. S2: Spherical Geometry Operators Using the S2 Geometry Library. https://CRAN.R-project.org/package=s2.\n\n\nGonzález-Leonardo, Miguel, Antonio López-Gay, Niall Newsham, Joaquín Recaño, and Francisco Rowe. 2022. “Understanding Patterns of Internal Migration During the COVID-19 Pandemic in Spain.” Population, Space and Place 28 (6). https://doi.org/10.1002/psp.2578.\n\n\nGonzález-Leonardo, Miguel, and Francisco Rowe. 2022. “Visualizing Internal and International Migration in the Spanish Provinces During the COVID-19 Pandemic.” Regional Studies, Regional Science 9 (1): 600–602. https://doi.org/10.1080/21681376.2022.2125824.\n\n\nGonzález-Leonardo, Miguel, Francisco Rowe, and Alberto Fresolone-Caparrós. 2022. “Rural Revival? The Rise in Internal Migration to Rural Areas During the COVID-19 Pandemic. Who Moved and Where?” Journal of Rural Studies 96 (December): 332–42. https://doi.org/10.1016/j.jrurstud.2022.11.006.\n\n\nLovelace, Robin, Jakub Nowosad, and Jannes Muenchow. 2019. Geocomputation with r. CRC Press.\n\n\nPebesma, Edzer. 2018. “Simple Features for R: Standardized Support for Spatial Vector Data.” The R Journal 10 (1): 439–46. https://doi.org/10.32614/RJ-2018-009.\n\n\n———. 2022a. Sf: Simple Features for r. https://CRAN.R-project.org/package=sf.\n\n\n———. 2022b. Stars: Spatiotemporal Arrays, Raster and Vector Data Cubes. https://CRAN.R-project.org/package=stars.\n\n\n———. 2023. Lwgeom: Bindings to Selected Liblwgeom Functions for Simple Features. https://github.com/r-spatial/lwgeom/.\n\n\nPebesma, Edzer, and Roger Bivand. 2023. Spatial Data Science: With Applications in r. CRC Press.\n\n\nPebesma, Edzer, and Benedikt Graeler. 2022. Gstat: Spatial and Spatio-Temporal Geostatistical Modelling, Prediction and Simulation. https://github.com/r-spatial/gstat/.\n\n\nRowe, Francisco, Alessia Calafiore, Daniel Arribas-Bel, Krasen Samardzhiev, and Martin Fleischmann. 2022. “Urban Exodus? Understanding Human Mobility in Britain During the COVID-19 Pandemic Using Meta-Facebook Data.” Population, Space and Place 29 (1). https://doi.org/10.1002/psp.2637.\n\n\nRowe, Francisco, Miguel González-Leonardo, and Tony Champion. 2023. “Virtual Special Issue: Internal Migration in Times of COVID-19.” Population, Space and Place, March. https://doi.org/10.1002/psp.2652.\n\n\nSchwartz, Joe et al. 2009. “Bing Maps Tile System.” Microsoft Developer Network Available: Http://Msdn. Microsoft. Com/En-Us/Library/Bb259689. Aspx.\n\n\nTennekes, Martijn. 2022. Tmap: Thematic Maps. https://github.com/r-tmap/tmap.\n\n\nWang, Yikang, Chen Zhong, Qili Gao, and Carmen Cabrera-Arnau. 2022. “Understanding Internal Migration in the UK Before and During the COVID-19 Pandemic Using Twitter Data.” Urban Informatics 1 (1). https://doi.org/10.1007/s44212-022-00018-w."
  }
]