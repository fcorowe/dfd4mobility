# Spatial patterns

## Aims

## Dependencies

```{r}
#| warning: false
#| message: false

# data wrangling
library(tidyverse)
#library(fs)
#library(here)

# spatial data wrangling
library(sf)
library(mapdeck)

# data visualisation
library(viridis) 
#library(viridisLite)
library(ggthemes)
library(patchwork)
library(showtext)
library(gganimate)
#library(gifski)
#library(ggnewscale)
```

## Data

Read and describe Meta-Facebook mobility data

```{r}
df20 <- readRDS("./data/fb/movement_adm/2020_04.rds") %>% 
  dplyr::filter(country == "CL")
str(df20)
```

```{r}
unique_origins <- unique(df20$start_polygon_name)
unique_destinations <- unique(df20$end_polygon_name)
```

### Bing tiles

Read and describe Bing tile grids and how they can be created - reference to our work.

```{r}
#bing_grid <- read_sf()
```

### Administrative areas

Read and describe administrative areas. Explain spatial data frames: geometry, projection, etc.

```{r}
shp <- read_sf("./data/shp/gadm41_CHL_3.shp") %>% 
  st_simplify(preserveTopology =T,
              dTolerance = 1000) %>%  # 1km
  sf::st_make_valid() %>% 
  dplyr::select( -c(
    NL_NAME_1, NL_NAME_2, VARNAME_3, NL_NAME_3, CC_3, HASC_3
  ) )

shp
```

```{r}
plot(shp$geometry)
```

## Spatial indicators of human mobility

### Origin-based indicators

This measure is in relation to a baseline - percentage change and flow

```{r}
origin_df <- df20 %>% 
  group_by(start_polygon_name) %>% 
  dplyr::summarise(
    mean_perchange = mean(percent_change, na.rm = T),
    mean_flows = mean(n_difference, na.rm = T),
    mean_outflow = mean(n_crisis, na.rm = T),
    sum_flows = sum(n_difference, na.rm = T),
    sum_outflow = sum(n_crisis, na.rm = T)
    ) %>% 
  ungroup()

tail(origin_df, 10)
```

### Destination-based indicators

```{r}
destination_df <- df20 %>% 
  group_by(end_polygon_name) %>% 
  dplyr::summarise(
    mean_perchange = mean(percent_change, na.rm = T),
    mean_flows = mean(n_difference, na.rm = T),
    mean_outflow = mean(n_crisis, na.rm = T),
    sum_flows = sum(n_difference, na.rm = T),
    sum_outflow = sum(n_crisis, na.rm = T)
    ) %>% 
  ungroup()

tail(destination_df, 10)
```

### Netflows

## Mapping

### Choropleths

### Interactive mapping

### Flow mapping

## Common concepts

There are several concepts relevant to understanding the data sets. First of all, we construct maps using two different methods of identifying locations: tiles and administrative polygons.

The Bing Maps Tile System defines a series of grids at different resolution levels over a rectangular projection of the world (Schwartz 2018). Each level is constructed by dividing the previous level into fourths. We typically use Bing tile levels 13 through 16, where level 13 results in tiles that are about 4.9 x 4.9 km at the Equator. The other method we use for identifying a location is administrative polygons, which define the political and geographic boundaries of countries, states, provinces, counties, cities, and more.

When generating a map for a crisis event, we specify a rectangular bounding box around the most directly affected area. The different map calculations, described in the following sections, are done relative to this region, and, for most of the maps, only data within this region is included. Most of the map types are based on counting events that occur within a time interval, which is frequently 8 or 24 hours. The time interval determines what data is included in a calculation as well as the minimum frequency with which new maps are generated.
